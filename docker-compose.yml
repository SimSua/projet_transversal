version: "3.7"
services:
  db:
    image: postgres
    container_name: postgres
    working_dir: /application
    volumes:
      - ./src-api/docker/pgsql:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=app_emergency,app_simulator
    ports:
      - "5433:5432"
    networks:
      - api

  webserver:
    image: nginx:alpine
    container_name: webserver
    working_dir: /application
    volumes:
     - .:/application
     - ./src-api/docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
     - "8081:80"
    networks:
      - api

  php-fpm:
    build: ./src-api/docker/php-fpm
    container_name: php-fpm
    working_dir: /application
    volumes:
      - ./src-api/server:/application
      - ./src-api/docker/php-fpm/php-ini-overrides.ini:/etc/php/7.2/fpm/conf.d/99-overrides.ini
    networks:
      - api

  manager:
    image: openjdk:13-alpine
    container_name: manager
    working_dir: /application
    volumes:
      - ./Emergency_Manager/manager.jar:/application/manager.jar
    command: java -jar manager.jar
    networks:
      - api

  emergency_view:
    build: ./Emergency_Web
    container_name: emergency_view
    working_dir: /application
    volumes:
      - ./Emergency_Web:/application
    command:
      - python run.py emergency_view webserver docker
      - python receiver_uart.py
    ports:
      - "5000:5000"
    networks:
      - api

networks:
  api:
